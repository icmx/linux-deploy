#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from argparse   import ArgumentParser
from argparse   import RawTextHelpFormatter
from datetime   import datetime
from os         import fsdecode
from os         import listdir
from os         import rename
from os.path    import basename
from os.path    import isdir
from os.path    import isfile
from os.path    import join
from re         import match
from re         import sub
from subprocess import call
from time       import sleep


NAME   = "renamebot"

parser = ArgumentParser(
    prog=NAME,
    formatter_class=RawTextHelpFormatter,
    description="renamebot - a shitty Python 3 script to monitor and " \
                "rename textual files in a given directory. Handful "  \
                "in case if you like to save tons of random texts "    \
                "but don't like to name them all manually.\n"          \
                "\n"                                                   \
                "Works best with libnotify installed.\n"               \
                "\n"                                                   \
                "Please note: this script renames (i.e. moves) file "  \
                "irreversibly! Make sure you correctly set up "        \
                "working directory and log file.",                     \
    epilog="example:\n"                                                \
           "  $ renamebot -i 60 -n ~/Documents/Random >> "             \
           "~/renamebot.log &\n"                                       \
           "\n"                                                        \
           "\"~Documents/Random\" is working directory and "           \
           "\"~/renamebot.log\" is log file specified via "            \
           "standard output redirection. In turn, \"&\" makes "        \
           "renamebot work in background.",
    add_help=True
)

parser.add_argument("-i", "--interval", action="store",       default=10,    help="Interval between specified directory scannings, in seconds", metavar="SECONDS"  )
parser.add_argument("-l", "--log",      action="store_false", default=True,  help="Log actions to standard output, enabled by default"                             )
parser.add_argument("-n", "--notify",   action="store_true",  default=False, help="Notify via libnotify (notify-send), disabled by default"                        )
parser.add_argument("directory",        nargs=1,                             help="Directory to monitor",                                       metavar="DIRECTORY")

args = parser.parse_args()

DIRECTORY           = "".join(args.directory)
INTERVAL            =     int(args.interval)
LOG                 =         args.log
NOTIFY              =         args.notify
FILE_NAME_EXTENSION = "txt"

def get_timestamp(base):
    result = datetime.now().strftime("%s")
    if base == 10:
        return result
    if base == 16:
        return hex(int(result))[2:]

def log(message):
    if LOG:
        timestamp = get_timestamp(10)
        print("{0}: at {1}: {2}".format(NAME, timestamp, message))
    if NOTIFY:
        call(["notify-send", "--app-name", NAME, NAME, message])

def is_renamable(node):
    return isfile(node) and \
           not match("[0-9a-f]{8}-[\w\-\.]+", basename(node))

def read(path):
    file = open(path, "r")
    data = file.read(2000) # first two kilobytes
    file.close()
    return data

def get_formatted(text):
    return sub("(\W|\s|_)+", "-", text).strip("-").lower()[0:18]

def get_new_name(node):
    timestamp = get_timestamp(16)
    formatted = get_formatted(read(node))
    extension = FILE_NAME_EXTENSION
    return "{0}-{1}.{2}".format(timestamp, formatted, extension)

def main():
    log("Started in {0}\nPress Ctrl+C to stop".format(DIRECTORY))
    while True:
        for item in listdir(DIRECTORY):
            path = join(DIRECTORY, item)
            if is_renamable(path):
                old_name = path
                new_name = get_new_name(path)
                try:
                    rename(old_name, new_name)
                except:
                    log("{0}: unable to rename".format(old_name))
                else:
                    log("{0}: renamed to {1}".format(old_name, new_name))
                finally:
                    sleep(1)
        sleep(INTERVAL)

if __name__ == "__main__":
    main()
